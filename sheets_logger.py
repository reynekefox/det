import os
import json
import logging
import asyncio
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import re

class SheetsLogger:
    def __init__(self):
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        google_creds_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
        
        if google_creds_json:
            try:
                creds_data = json.loads(google_creds_json)
                logging.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            except json.JSONDecodeError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GOOGLE_CREDENTIALS_JSON: {e}")
                raise
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
            try:
                with open('gcreds.json', 'r') as f:
                    creds_data = json.load(f)
                logging.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google –∏–∑ —Ñ–∞–π–ª–∞ gcreds.json")
            except FileNotFoundError:
                logging.error("–§–∞–π–ª gcreds.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ GOOGLE_CREDENTIALS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                raise

        self.credentials = service_account.Credentials.from_service_account_info(
            creds_data,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )

        self.service = build('sheets', 'v4', credentials=self.credentials)
        self.sheet = self.service.spreadsheets()

        self.spreadsheet_id = os.getenv('GOOGLE_SHEET_ID')
        if not self.spreadsheet_id or self.spreadsheet_id == 'your_spreadsheet_id_here':
            logging.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_SHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheets –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.")
            raise ValueError("GOOGLE_SHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω.")

        self.user_columns = {}
        logging.info(f"SheetsLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å spreadsheet_id: {self.spreadsheet_id}")

    def get_user_column(self, user_name, user_id):
        user_key = f"{user_name} (ID: {user_id})"

        if user_key in self.user_columns:
            return self.user_columns[user_key]

        try:
            result = self.sheet.values().get(
                spreadsheetId=self.spreadsheet_id,
                range='Sheet1!1:1' # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç –∏ —Å—Ç—Ä–æ–∫—É
            ).execute()

            headers = result.get('values', [[]])[0] if result.get('values') else []

            for i, header in enumerate(headers):
                if header == user_key:
                    self.user_columns[user_key] = i
                    logging.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_key}' –≤ –ø–æ–∑–∏—Ü–∏–∏ {i}")
                    return i

            new_column = len(headers)
            self.user_columns[user_key] = new_column

            column_letter = self._get_column_letter(new_column)
            self.sheet.values().update(
                spreadsheetId=self.spreadsheet_id,
                range=f'Sheet1!{column_letter}1', # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç, —Å—Ç–æ–ª–±–µ—Ü –∏ —Å—Ç—Ä–æ–∫—É
                valueInputOption='RAW',
                body={'values': [[user_key]]}
            ).execute()
            logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü '{user_key}' –≤ –ø–æ–∑–∏—Ü–∏–∏ {new_column} ({column_letter})")

            return new_column

        except HttpError as e:
            logging.error(f"–û—à–∏–±–∫–∞ Google Sheets API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e.content}", exc_info=True)
            return 0
        except Exception as e:
            logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
            return 0

    def _get_column_letter(self, column_number):
        letter = ""
        while column_number >= 0:
            letter = chr(column_number % 26 + ord('A')) + letter
            column_number = column_number // 26 - 1
        return letter

    def log_message(self, user_name, user_id, message_text, is_user=True):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Google Sheets –≤ —Å—Ç–æ–ª–±–µ—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        max_retries = 3
        retry_delay = 1  # —Å–µ–∫—É–Ω–¥
        
        for attempt in range(max_retries):
            try:
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                sender = "üë§" if is_user else "ü§ñ"

                column_num = self.get_user_column(user_name, user_id)
                column_letter = self._get_column_letter(column_num)

                formatted_message = f"{timestamp} {sender} {message_text}"

                result = self.sheet.values().get(
                    spreadsheetId=self.spreadsheet_id,
                    range=f'Sheet1!{column_letter}:{column_letter}' # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç –∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ª–±—Ü–∞
                ).execute()

                values = result.get('values', [])
                next_row = len(values) + 1

                self.sheet.values().update(
                    spreadsheetId=self.spreadsheet_id,
                    range=f'Sheet1!{column_letter}{next_row}', # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç, —Å—Ç–æ–ª–±–µ—Ü –∏ —Å—Ç—Ä–æ–∫—É
                    valueInputOption='RAW',
                    body={'values': [[formatted_message]]}
                ).execute()

                logging.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±–µ—Ü {column_letter} —Å—Ç—Ä–æ–∫—É {next_row} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
                return  # –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º

            except (AttributeError, ConnectionError, OSError) as e:
                # –û—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è 'NoneType' object has no attribute 'read'
                if attempt < max_retries - 1:
                    logging.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}. –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫...")
                    import time
                    time.sleep(retry_delay)
                    retry_delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    continue
                else:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheets –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    
            except HttpError as e:
                logging.error(f"–û—à–∏–±–∫–∞ Google Sheets API –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e.content}", exc_info=True)
                break  # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è API –æ—à–∏–±–æ–∫
                
            except Exception as e:
                if attempt < max_retries - 1:
                    logging.warning(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}. –ü–æ–≤—Ç–æ—Ä—è–µ–º...")
                    import time
                    time.sleep(retry_delay)
                    retry_delay *= 2
                    continue
                else:
                    logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ Google Sheets: {e}", exc_info=True)

    async def log_message_async(self, user_name, user_id, message_text, is_user=True):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Google Sheets –≤ —Å—Ç–æ–ª–±–µ—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        def _log_sync():
            return self.log_message(user_name, user_id, message_text, is_user)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, _log_sync)

    def create_headers_if_needed(self):
        try:
            result = self.sheet.values().get(
                spreadsheetId=self.spreadsheet_id,
                range='Sheet1!1:1' # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Å—Ç –∏ —Å—Ç—Ä–æ–∫—É
            ).execute()

            values = result.get('values', [])

            if not values or not values[0]:
                logging.info("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –°—Ç–æ–ª–±—Ü—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø–æ –º–µ—Ä–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–Ω—É—Ç –æ–±—â–∞—Ç—å—Å—è.")
            else:
                logging.info("–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
                for i, header in enumerate(values[0]):
                    match = re.match(r'(.+) \(ID: (\d+)\)', header)
                    if match:
                        user_key = header
                        self.user_columns[user_key] = i
                logging.info("–ö—ç—à user_columns –∑–∞–ø–æ–ª–Ω–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.")

        except HttpError as e:
            logging.error(f"–û—à–∏–±–∫–∞ Google Sheets API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e.content}", exc_info=True)
        except Exception as e:
            logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}", exc_info=True)