import asyncio
import signal
import sys
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import CommandStart, Command
from m_config import logger, TELEGRAM_TOKEN
from m_handlers import (
    start_router,
    reset_dialog_handler,
    reload_prompts,
    show_prompt,
    cmd_user_info,
    cmd_all_users,
    deepseek_router
)
from broadcaster import broadcast_command_handler
from docs_loader import DocsLoader
from sheets_logger import SheetsLogger
from user_manager import UserManager
from user_data_manager import UserDataManager
from m_prompts import load_all_prompts
from m_utils import get_bot_info
from dialog_manager import DialogManager

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot = None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    global bot

    if not TELEGRAM_TOKEN:
        logger.critical("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        sys.exit(1)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    shutdown_event = asyncio.Event()
    
    def signal_handler(sig, frame):
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}. –ò–Ω–∏—Ü–∏–∞—Ü–∏—è graceful shutdown...")
        shutdown_event.set()

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher()
    router = Router()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    max_connection_attempts = 3
    for attempt in range(max_connection_attempts):
        try:
            bot_info = await bot.get_me()
            logger.info(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç: @{bot_info.username}")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_connection_attempts}): {e}")
            if attempt == max_connection_attempts - 1:
                logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                await bot.session.close()
                sys.exit(1)
            await asyncio.sleep(5)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        docs_loader_instance = DocsLoader()
        load_all_prompts(docs_loader_instance)

        try:
            sheets_logger_instance = SheetsLogger()
            sheets_logger_instance.create_headers_if_needed()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å SheetsLogger: {e}. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google Sheets –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", exc_info=True)
            sheets_logger_instance = None

        user_manager = UserManager()
        user_data_manager = UserDataManager()
        dialog_manager = DialogManager()

        # –î–æ–±–∞–≤–ª—è–µ–º DialogManager –≤ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        bot.dialog_manager = dialog_manager

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        router.message.register(start_router, CommandStart())
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        async def reset_handler_wrapper(message):
            await reset_dialog_handler(message, sheets_logger_instance)

        async def reload_prompts_wrapper(message):
            await reload_prompts(message, docs_loader_instance)

        async def show_prompt_wrapper(message):
            await show_prompt(message, docs_loader_instance)

        async def user_info_wrapper(message):
            await cmd_user_info(message, user_data_manager)

        async def all_users_wrapper(message):
            await cmd_all_users(message, user_data_manager)

        async def deepseek_wrapper(message):
            await deepseek_router(message, docs_loader_instance, sheets_logger_instance, user_data_manager, user_manager)

        router.message.register(reset_handler_wrapper, Command("reset"))
        router.message.register(reload_prompts_wrapper, Command("reload_prompts"))
        router.message.register(show_prompt_wrapper, Command("show_prompt"))
        router.message.register(user_info_wrapper, Command("user_info"))
        router.message.register(all_users_wrapper, Command("all_users"))

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã broadcast
        async def broadcast_handler_wrapper(message):
            from m_config import ADMIN_IDS
            await broadcast_command_handler(
                message=message,
                bot=bot,
                sheets_logger_instance=sheets_logger_instance,
                user_manager=user_manager,
                ADMIN_IDS=ADMIN_IDS
            )

        router.message.register(broadcast_handler_wrapper, Command("broadcast"))
        router.message.register(deepseek_wrapper)

        dp.include_router(router)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ workflow
        dp.workflow_data.update({
            "sheets_logger_instance": sheets_logger_instance,
            "user_manager": user_manager,
            "user_data_manager": user_data_manager,
            "docs_loader_instance": docs_loader_instance
        })

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        bot_info = get_bot_info()
        logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è {bot_info['name']}...")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
        async def on_shutdown():
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            try:
                await bot.session.close()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        from health_checker import BotHealthChecker
        health_checker = BotHealthChecker(bot)
        health_task = asyncio.create_task(health_checker.start_monitoring())
        
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è polling
            polling_task = asyncio.create_task(dp.start_polling(
                bot, 
                polling_timeout=20,  # –¢–∞–π–º–∞—É—Ç –¥–ª—è long polling
                request_timeout=15,  # –¢–∞–π–º–∞—É—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
                skip_updates=True    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
            ))
            
            # –ñ–¥–µ–º –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è polling, –ª–∏–±–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            done, pending = await asyncio.wait(
                [polling_task, asyncio.create_task(shutdown_event.wait())],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                    
            logger.info("üìä Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ polling: {e}", exc_info=True)
            raise
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            health_task.cancel()
            try:
                await health_task
            except asyncio.CancelledError:
                pass
            
            await on_shutdown()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        sys.exit(1)

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    run_bot()