from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from m_config import logger, ADMIN_IDS, BOT_NAME, BOT_USERNAME, TELEGRAM_TOKEN
from m_utils import get_bot_info
from ds_utils import add_message_to_deepseek_dialog, send_long_message_safe
from ds_message_handler import handle_deepseek_message
from datetime import datetime

router = Router()

@router.message(CommandStart())
async def start_router(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        welcome_message = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–µ—Ç—Å–∫–æ–≥–æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ä–æ–¥–∏—Ç–µ–ª—è–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ–º, –æ–±—É—á–µ–Ω–∏–µ–º, –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∏—á–∏–Ω–∞—Ö –Ω–µ–∂–µ–ª–∞–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ —É—á–∏—Ç—å—Å—è, –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–±—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É, –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥ –∫ —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏.\n\n"
            "–Ø –º–æ–≥—É:\n"
            "‚ú® –í—ã–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥ –ø–æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ.\n"
            "üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.\n"
            "üß© –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏—Ö —Å–∫–∞–∑–æ–∫ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É –ø–æ–Ω—è—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –∑–Ω–∞–Ω–∏–π –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ.\n"
            "üé≤ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É —Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö –∏–≥—Ä, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º.\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å? –ò —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É? ü§î"
        )
        await message.answer(welcome_message)

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Google Sheets
        try:
            if hasattr(message.bot, "sheets_logger") and message.bot.sheets_logger:
                await message.bot.sheets_logger.log_message(
                    user_name=message.from_user.full_name,
                    user_id=message.from_user.id,
                    message_text="/start",
                    is_user=True
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ Google Sheets: {str(e)}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_router: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        raise

async def reset_dialog_handler(message: Message, user_data_manager=None):
    """–°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id

    try:
        # –û—á–∏—â–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        from ds_utils import clear_dialog_history
        clear_dialog_history(user_id, message.bot)

        await message.answer("–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! üòä")
        logger.info(f"–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∏–∞–ª–æ–≥–∞.")

async def reload_prompts(message: Message, docs_loader_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reload_prompts."""
    from m_prompts import load_all_prompts

    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...")
        load_all_prompts(docs_loader_instance)
        await message.answer("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")

async def show_prompt(message: Message, docs_loader_instance):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show_prompt."""
    from m_prompts import get_system_prompt_content

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    try:
        prompt = await get_system_prompt_content(docs_loader_instance)
        await send_long_message_safe(message, prompt, parse_mode=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞.")

async def cmd_user_info(message: Message, user_data_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /user_info."""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info <user_id>")
        return
    try:
        user_id = int(args[1])
        user_data = user_data_manager.get_user_data(user_id)
        info = (
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}\n\n"
            f"üÜï –°–æ–∑–¥–∞–Ω: {user_data['created_at']}\n"
            f"üìö –ú–∞–Ω—É–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {'–î–∞' if user_data['manual_sent'] else '–ù–µ—Ç'}\n"
        )
        if user_data['manual_sent']:
            info += f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞–Ω—É–∞–ª–∞: {user_data['manual_sent_at']}\n"
        info += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {user_data['last_interaction']}"
        await message.answer(info)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

async def cmd_all_users(message: Message, user_data_manager):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /all_users."""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    try:
        users_data = user_data_manager.get_all_users_data()
        if not users_data:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
            return
        info = "üìä –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user_id, data in users_data.items():
            info += (
                f"üë§ ID: {user_id}\n"
                f"üìö –ú–∞–Ω—É–∞–ª: {'‚úÖ' if data['manual_sent'] else '‚ùå'}\n"
                f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['last_interaction']}\n\n"
            )
        await send_long_message_safe(message, info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@router.message()
async def deepseek_router(message: Message, docs_loader_instance, sheets_logger_instance=None, user_data_manager=None, user_manager=None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è DeepSeek."""
    user_id = message.from_user.id
    logger.info(f"[–í–•–û–î–Ø–©–ï–ï_–°–û–û–ë–©–ï–ù–ò–ï] –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message.text}' (message_id: {message.message_id})")
    
    if user_data_manager:
        user_data_manager.update_last_interaction(user_id)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text[:50]}...")
    try:
        await handle_deepseek_message(
            message=message,
            user_data_manager=user_data_manager,
            user_manager=user_manager,
            sheets_logger_instance=sheets_logger_instance,
            docs_loader_instance=docs_loader_instance
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ deepseek_router: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        raise