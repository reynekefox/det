import asyncio
import logging
import re
from typing import Optional, Dict, Any
from aiogram.types import Message

from ds_models import choose_deepseek_model
from ds_api import make_deepseek_request
from ds_utils import send_long_message_safe, format_dialog_history, _split_message_smartly
from emotion_handler import extract_emotion_from_text, remove_emotion_tags, send_emotion_image

logger = logging.getLogger(__name__)

def convert_markdown_to_html(text: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫—É –≤ HTML-—Ç–µ–≥–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ Telegram.
    """
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **text** –∏ __text__ –≤ <b>text</b>
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'__(.*?)__', r'<b>\1</b>', text)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å–∏–≤ *text* –∏ _text_ –≤ <i>text</i>
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    text = re.sub(r'_(.*?)_', r'<i>\1</i>', text)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –∫–æ–¥ `text` –≤ <code>text</code>
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)

    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ (–æ–Ω–∏ –ø–ª–æ—Ö–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ Telegram)
    text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ [text](url) –≤ <a href="url">text</a>
    text = re.sub(r'\[([^\]]+)\]\(([^\)]+)\)', r'<a href="\2">\1</a>', text)

    return text

async def handle_deepseek_message(
    message: Message,
    user_data_manager=None,
    user_manager=None,
    sheets_logger_instance=None,
    docs_loader_instance=None
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ DeepSeek API."""
    user_id = message.from_user.id
    start_time = asyncio.get_event_loop().time()
    logger.info(f"[–ù–ê–ß–ê–õ–û_–û–ë–†–ê–ë–û–¢–ö–ò] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {message.text[:50]}...")

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        async with asyncio.timeout(90):  # 1.5 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
            """
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é DeepSeek API.

            Args:
                message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                is_classification_request: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
                dialog_history_override: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
                max_tokens_override: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
            """
            try:
                user_id = message.from_user.id
                logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –ù–ê–ß–ê–õ–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message.text[:100]}...'")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_manager –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ)
                if user_manager:
                    user_manager.add_user(user_id)
                    logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ user_manager")

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                user_data_manager.update_last_interaction(user_id)
                logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {user_id}")

                # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
                logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è {user_id}")
                model, model_choice = await choose_deepseek_model(message)
                logger.info(f"üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å '{model}' –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–≤—ã–±–æ—Ä: {model_choice})")
                logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {model}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å reasoning –º–æ–¥–µ–ª–∏
                if model_choice == "reasoning":
                    from ds_models import test_model_availability
                    if not await test_model_availability("deepseek-reasoner"):
                        logger.warning("[DeepSeek] Reasoning –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ chat")
                        model = "deepseek-chat"
                        model_choice = "chat"
                        await message.answer("ü§î –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å... –£–ø—Å, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–≤–µ—á—É –ø—Ä–æ—â–µ!")
                        thinking_message = None
                    else:
                        thinking_message = await message.answer("ü§î –ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...")
                else:
                    thinking_message = None

                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                from ds_utils import get_dialog_history
                dialog_history = get_dialog_history(message.from_user.id, message.bot)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                from ds_utils import add_message_to_deepseek_dialog
                add_message_to_deepseek_dialog(message=message, is_user=True)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                formatted_messages = format_dialog_history(dialog_history)

                # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ docs_loader
                from m_prompts import get_system_prompt_content
                try:
                    system_prompt_content = await get_system_prompt_content(docs_loader_instance)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
                    system_prompt_content = ("–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –ø–µ–¥–∞–≥–æ–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º –≤ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏ –¥–µ—Ç–µ–π, "
                                           "–æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–∑–≤–∏—Ç–∏–∏, –æ–±—É—á–µ–Ω–∏–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –¥–µ—Ç–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥, "
                                           "–Ω–æ –æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º. –í—Å–µ–≥–¥–∞ –ø—Ä–æ—è–≤–ª—è–π —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º.")

                system_message = {
                    "role": "system",
                    "content": system_prompt_content
                }
                formatted_messages.insert(0, system_message)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
                logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API –¥–ª—è {user_id}")
                response = await make_deepseek_request(
                    messages=formatted_messages,
                    model=model,
                    temperature=0.05,
                    max_tokens=None
                )

                logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API –¥–ª—è {user_id}")
                logger.info(f"[DeepSeek] –û—Ç–≤–µ—Ç: {response}")

                if not response or "choices" not in response or not response["choices"]:
                    logger.error(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API –¥–ª—è {user_id}")
                    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
                    return

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                response_text = response["choices"][0]["message"]["content"]

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–º–æ—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞
                emotion = extract_emotion_from_text(response_text)

                # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ —ç–º–æ—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
                response_text = remove_emotion_tags(response_text)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown –≤ HTML
                response_text = convert_markdown_to_html(response_text)

                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Google Sheets (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
                if sheets_logger_instance:
                    asyncio.create_task(sheets_logger_instance.log_message_async(
                        user_name=message.from_user.full_name,
                        user_id=message.from_user.id,
                        message_text=message.text,
                        is_user=True
                    ))

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...', –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
                if thinking_message:
                    try:
                        await thinking_message.delete()
                    except Exception:
                        pass

                # –ï—Å–ª–∏ –µ—Å—Ç—å —ç–º–æ—Ü–∏—è, –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å
                if emotion:
                    logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —ç–º–æ—Ü–∏–µ–π '{emotion}' –¥–ª—è {user_id}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ (–ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∏ –≤ Telegram - 1024 —Å–∏–º–≤–æ–ª–∞)
                    if len(response_text) <= 1024:
                        # –¢–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –ø–æ–¥–ø–∏—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        await send_emotion_image(message.bot, message.chat.id, emotion, response_text)
                        logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –¥–ª—è {user_id}")
                    else:
                        # –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
                        chunks = _split_message_smartly(response_text, 900)  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Å—Ç–∏
                        logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ {len(chunks)} —á–∞—Å—Ç–µ–π –¥–ª—è {user_id}")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                        for i, chunk in enumerate(chunks[:-1]):
                            try:
                                chunk_with_indicator = f"üìù –ß–∞—Å—Ç—å {i+1}/{len(chunks)}:\n\n{chunk}"
                                logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å {i+1}/{len(chunks)} –¥–ª—è {user_id}")
                                await message.answer(chunk_with_indicator, parse_mode="HTML")
                                logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {i+1}/{len(chunks)} –¥–ª—è {user_id}")

                                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                                await asyncio.sleep(0.5)

                            except Exception as e:
                                logger.error(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}/{len(chunks)} –¥–ª—è {user_id}: {e}")
                                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ HTML —Ä–∞–∑–º–µ—Ç–∫–∏
                                try:
                                    await message.answer(chunk_with_indicator)
                                    logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] Fallback —É—Å–ø–µ—à–µ–Ω –¥–ª—è —á–∞—Å—Ç–∏ {i+1}/{len(chunks)}")
                                except Exception as e2:
                                    logger.error(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —á–∞—Å—Ç–∏ {i+1}/{len(chunks)}: {e2}")

                # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
                        try:
                            last_chunk = chunks[-1]
                            if len(chunks) > 1:
                                last_chunk_with_indicator = f"üìù –ß–∞—Å—Ç—å {len(chunks)}/{len(chunks)}:\n\n{last_chunk}"
                            else:
                                last_chunk_with_indicator = last_chunk

                            logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –¥–ª—è {user_id}")
                            await send_emotion_image(message.bot, message.chat.id, emotion, last_chunk_with_indicator)
                            logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –¥–ª—è {user_id}")
                        except Exception as e:
                            logger.error(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –¥–ª—è {user_id}: {e}")
                else:
                    logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ —ç–º–æ—Ü–∏–∏ –¥–ª—è {user_id}")
                    # –ï—Å–ª–∏ —ç–º–æ—Ü–∏–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await send_long_message_safe(message, response_text, parse_mode="HTML")
                    logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {user_id}")

                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ Google Sheets (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                if sheets_logger_instance:
                    asyncio.create_task(sheets_logger_instance.log_message_async(
                        user_name=message.from_user.full_name,
                        user_id=message.from_user.id,
                        message_text=response_text,
                        is_user=False
                    ))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                add_message_to_deepseek_dialog(
                    user_id=message.from_user.id,
                    role="assistant", 
                    content=response["choices"][0]["message"]["content"],
                    bot=message.bot
                )

                logger.info(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –£–°–ü–ï–•: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {user_id}")

            except asyncio.TimeoutError:
                logger.error(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –¢–ê–ô–ú–ê–£–¢ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}")
                try:
                    await message.answer("‚è∞ –ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except Exception:
                    pass
                return
            except Exception as e:
                logger.error(f"[–î–ï–¢–ê–õ–¨–ù–´–ô_–õ–û–ì] –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}: {e}", exc_info=True)
                try:
                    await message.answer("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except Exception:
                    pass
                return

    except asyncio.TimeoutError:
        processing_time = asyncio.get_event_loop().time() - start_time
        logger.error(f"‚è∞ –¢–ê–ô–ú–ê–£–¢ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ {processing_time:.2f}—Å")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        processing_time = asyncio.get_event_loop().time() - start_time
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ {processing_time:.2f}—Å: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        processing_time = asyncio.get_event_loop().time() - start_time
        logger.info(f"[–ö–û–ù–ï–¶_–û–ë–†–ê–ë–û–¢–ö–ò] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {processing_time:.2f}—Å")