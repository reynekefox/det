
import asyncio
import logging
import aiohttp
from datetime import datetime
from m_config import TELEGRAM_TOKEN

logger = logging.getLogger(__name__)

class BotHealthChecker:
    def __init__(self, bot):
        self.bot = bot
        self.last_successful_check = datetime.now()
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞."""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞")
        
        while True:
            try:
                await asyncio.sleep(self.check_interval)
                await self._perform_health_check()
            except asyncio.CancelledError:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                
    async def _perform_health_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
            start_time = asyncio.get_event_loop().time()
            me = await self.bot.get_me()
            response_time = asyncio.get_event_loop().time() - start_time
            
            self.last_successful_check = datetime.now()
            logger.info(f"üíö –ë–æ—Ç –∑–¥–æ—Ä–æ–≤: @{me.username} (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.2f}—Å)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API
            await self._check_external_apis()
            
        except Exception as e:
            logger.error(f"üíÄ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –±–æ—Ç–∞: {e}")
            
    async def _check_external_apis(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DeepSeek API
            async with aiohttp.ClientSession() as session:
                async with session.get("https://api.deepseek.com", timeout=10) as response:
                    if response.status in [200, 404]:  # 404 —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL
                        logger.info("‚úÖ DeepSeek API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        logger.warning(f"‚ö†Ô∏è DeepSeek API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é DeepSeek API: {e}")
