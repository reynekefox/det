import logging
from typing import List, Dict, Any
from aiogram.types import Message

logger = logging.getLogger(__name__)

async def send_long_message_safe(message: Message, text: str, parse_mode=None, chunk_size=2000) -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        parse_mode: –†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        chunk_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        if len(text) <= chunk_size:
            await message.answer(text, parse_mode=parse_mode)
            return

        # –£–º–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏
        chunks = _split_message_smartly(text, chunk_size)
        
        for i, chunk in enumerate(chunks):
            try:
                logger.info(f"[–û–¢–ü–†–ê–í–ö–ê_–ß–ê–°–¢–ò] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å {i+1}/{len(chunks)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —á–∞—Å—Ç–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
                if len(chunks) > 1:
                    chunk_with_indicator = f"üìù –ß–∞—Å—Ç—å {i+1}/{len(chunks)}:\n\n{chunk}"
                    await message.answer(chunk_with_indicator, parse_mode=parse_mode)
                else:
                    await message.answer(chunk, parse_mode=parse_mode)
                logger.info(f"[–û–¢–ü–†–ê–í–ö–ê_–ß–ê–°–¢–ò] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {i+1}/{len(chunks)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                if i < len(chunks) - 1:  # –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                    import asyncio
                    await asyncio.sleep(0.5)
                    
            except Exception as e:
                # fallback –µ—Å–ª–∏ parse_mode –Ω–µ –ø–æ–¥–æ—à—ë–ª
                logger.error(f"[–û–¢–ü–†–ê–í–ö–ê_–ß–ê–°–¢–ò] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}/{len(chunks)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
                try:
                    if len(chunks) > 1:
                        chunk_with_indicator = f"üìù –ß–∞—Å—Ç—å {i+1}/{len(chunks)}:\n\n{chunk}"
                        await message.answer(chunk_with_indicator)
                    else:
                        await message.answer(chunk)
                    logger.info(f"[–û–¢–ü–†–ê–í–ö–ê_–ß–ê–°–¢–ò] Fallback —É—Å–ø–µ—à–µ–Ω –¥–ª—è —á–∞—Å—Ç–∏ {i+1}/{len(chunks)}")
                except Exception as e2:
                    logger.error(f"[–û–¢–ü–†–ê–í–ö–ê_–ß–ê–°–¢–ò] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å {i+1}/{len(chunks)}: {e2}")
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    try:
                        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å {i+1}/{len(chunks)} —Å–æ–æ–±—â–µ–Ω–∏—è")
                    except:
                        pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

def _split_message_into_chunks(text: str, max_length: int) -> List[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    """
    chunks = []
    current_chunk = ""

    for line in text.split("\n"):
        if len(current_chunk) + len(line) + 1 <= max_length:
            current_chunk += line + "\n"
        else:
            if current_chunk:
                chunks.append(current_chunk.strip())
            current_chunk = line + "\n"

    if current_chunk:
        chunks.append(current_chunk.strip())

    return chunks

def _split_message_smartly(text: str, max_length: int) -> List[str]:
    """
    –£–º–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —Å—Ç–∞—Ä–∞—è—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞–±–∑–∞—Ü–µ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏

    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    """
    if len(text) <= max_length:
        return [text]
    
    chunks = []
    current_chunk = ""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = text.split("\n\n")
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –∞–±–∑–∞—Ü –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–∏–π chunk
        if len(current_chunk) + len(paragraph) + 2 <= max_length:
            if current_chunk:
                current_chunk += "\n\n" + paragraph
            else:
                current_chunk = paragraph
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π chunk –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            if current_chunk:
                chunks.append(current_chunk.strip())
            
            # –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
            if len(paragraph) > max_length:
                sentences = paragraph.split(". ")
                temp_chunk = ""
                
                for i, sentence in enumerate(sentences):
                    sentence_with_dot = sentence + ("." if i < len(sentences) - 1 else "")
                    
                    if len(temp_chunk) + len(sentence_with_dot) + 1 <= max_length:
                        if temp_chunk:
                            temp_chunk += " " + sentence_with_dot
                        else:
                            temp_chunk = sentence_with_dot
                    else:
                        if temp_chunk:
                            chunks.append(temp_chunk.strip())
                        temp_chunk = sentence_with_dot
                
                current_chunk = temp_chunk
            else:
                current_chunk = paragraph
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π chunk
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    return chunks

def format_dialog_history(messages: List[Dict[str, str]]) -> List[Dict[str, str]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API.

    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "...", "content": "..."}]

    Returns:
        List[Dict[str, str]]: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    """
    formatted_messages = []

    for msg in messages:
        if isinstance(msg, dict) and "role" in msg and "content" in msg:
            formatted_messages.append({
                "role": msg["role"],
                "content": str(msg["content"])
            })

    return formatted_messages

def add_message_to_deepseek_dialog(user_id: int = None, role: str = None, content: str = None, message: Message = None, is_user: bool = True, bot=None) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ DeepSeek.

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω message)
        role: –†–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è ('user' –∏–ª–∏ 'assistant')
        content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö)
        is_user: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω message)
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ message –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
        if message:
            user_id = message.from_user.id
            content = message.text
            role = "user" if is_user else "assistant"
            bot = message.bot

        if not bot:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DialogManager –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
        if hasattr(bot, "dialog_manager"):
            bot.dialog_manager.add_message(user_id, role, content)
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if not hasattr(bot, "dialogs"):
                bot.dialogs = {}

            if user_id not in bot.dialogs:
                bot.dialogs[user_id] = {"messages": []}

            message_data = {
                "role": role,
                "content": content
            }

            bot.dialogs[user_id]["messages"].append(message_data)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {role} - {content[:50]}...")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥: {e}")

def get_dialog_history(user_id: int, bot) -> List[Dict[str, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DialogManager –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if hasattr(bot, "dialog_manager"):
            return bot.dialog_manager.get_messages(user_id)
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            if not hasattr(bot, "dialogs"):
                return []
            return bot.dialogs.get(user_id, {}).get("messages", [])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

def clear_dialog_history(user_id: int, bot) -> None:
    """
    –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    """
    try:
        if hasattr(bot, "dialog_manager"):
            bot.dialog_manager.clear_dialog(user_id)
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            if hasattr(bot, "dialogs") and user_id in bot.dialogs:
                bot.dialogs[user_id] = {"messages": []}
        logger.info(f"–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")