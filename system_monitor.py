
#!/usr/bin/env python3
import psutil
import logging
import asyncio
import os
from datetime import datetime

logger = logging.getLogger(__name__)

class SystemMonitor:
    def __init__(self, check_interval=300):  # 5 –º–∏–Ω—É—Ç
        self.check_interval = check_interval
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤."""
        logger.info("üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
        
        while True:
            try:
                await asyncio.sleep(self.check_interval)
                await self._check_resources()
            except asyncio.CancelledError:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
                
    async def _check_resources(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
            bot_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'memory_percent', 'cpu_percent']):
                try:
                    if 'main.py' in ' '.join(proc.info['cmdline'] or []):
                        bot_processes.append(proc.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            logger.info(f"üíæ –ü–∞–º—è—Ç—å: {memory.percent:.1f}% | CPU: {cpu_percent:.1f}% | –ü—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞: {len(bot_processes)}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            if memory.percent > 85:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent:.1f}%")
            
            if cpu_percent > 80:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu_percent:.1f}%")
                
            if len(bot_processes) > 3:
                logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞: {len(bot_processes)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    monitor = SystemMonitor()
    asyncio.run(monitor.start_monitoring())
